Release 2.1
~~~~~~~~~~~

1. Added partial WT33x power meter suppport.
2. Fixed man page installation failure.

Release 2.0
~~~~~~~~~~~

This is a major update which also slightly changes the PowerMeter.py API.

1. WT210 power meter is now also supported.
2. A test suite was added. Currently it requires a real power meter device.
3. Added README.md file with improved documentation.
4. Listen mode was removed because no one used it.
5. Added auto-completions via the 'argcomplete' python project.
6. Support both python 3.x and python 2.7.

Release 1.4
~~~~~~~~~~~

1. Implemented the support of virtual data items like: along with the data we read from the power
   meter (like power, current, voltage, etc), users can now also read “time stamp” and “Joules”.

2. BUG FIX: catch empty parameters for "set-math"

   The command requires an argument but we wouldn't catch the case where the argument was empty,
   which triggered a TypeError exception.

3. yokotool: BUG FIX: catch all relevant exceptions in "listen" mode

   In "listen" mode, some error messages were not forwarded to the client but would display
   on the server side.

4. yokotool: BUG FIX: the "integration timer" values should be integers only

5. yokotool: BUG FIX: use "error_stream" instead of "sys.stderr"

   We want to color the error messages that we write to a terminal. And since we can define a custom
   stream that is not interactive, we should also check the appropriate global variable to filter out
   the non-interactive streams.

6. Ported yoko-tool to Python3


Release 1.3
~~~~~~~~~~~

yoko-tool (1.3) trusty; urgency=low

1. yokotool: fix integration start

    Fix incorrect indentation introduced in:
    80794a0 yokotool: check integration timer is > 0 when mode is "continuous"

2. yokotool: BUG FIX: enable users to set an integration timer value

    get_argument_help() usually returns the valid values for a property. So we used to rely on this
    function to verify the data before assigning it to a property.
    However, integration timer was an exception to that rule. With this patch we verify the timer
    value against a range of integers instead of a help message.


Release 1.2
~~~~~~~~~~~

yoko-tool (1.2) trusty; urgency=low

1. Set a default value to -m | --devmodel command-line argument

    It's generally a bad approach to break what worked previously and to make users re-learn how to
    use a software. The introduction of -m | --devmodel had such an unfortunate impact on Yoko tool.
    Reverted this behavior by setting a default value to the command-line argument.


Release 1.1
~~~~~~~~~~~

yoko-tool (1.1) trusty; urgency=low

1. Bug fix:
   Remove "arg" useless parameter since it would provoke the following error:
   TypeError: integration_wait_subcommand() takes exactly 2 arguments (1 given)

2. Support a configuration file containing the device model along with the device node.

   A configuration file spares users the need to specify these information within the
   command-line. However, when they do so, these information prevail over the corresponding
   data from the configuration file.

3. Support "-m | --devmodel" command-line argument.

   With "-m | --devmodel", users can specify which power meter device model they want to use.

4. Check integration timer is > 0 when mode is "continuous"

   Starting integration with a timer value of "0" and a mode set to "continuous" is not possible
   anymore. Instead, users are instructed about what to do as per below message:
   yokotool: ERROR: Please, set a timer value higher than "0" to start integration in "continuous" mode.

5. Improve Error messages readability in PowerMeter.py library.

   Before we would get a message like:
     $ ./yokotool /dev/usbtmc0 read V -l 2
     yokotool: ERROR: failed to write command "
     *CLS" to <yokotools.transport.USBTMC object at 0x7f809de34190>: error while writing to device '/dev/usbtmc0': [Errno 9] Bad file descriptor

   Now we get:
     $ ./yokotool /dev/usbtmc0 read V -l 2
     yokotool: ERROR: failed to write command "*CLS" to the power meter:
     error while writing to device '/dev/usbtmc0': [Errno 9] Bad file descriptor

6. Improve the organization of integration related commands.

   New syntax to:
     Trigger an integration command:
     $ yokotool <device_node> integration <wait | start | stop | reset>

     Get the value of an integration property:
     $ yokotool <device_node> integration <state | mode | timer>

     Set the value of an integration property:
     $ yokotool <device_node> integration <mode | timer> <value>

7. Improve the organization of smoothing related commands.

   New syntax to:
     Get the value of a smoothing property:
     $ yokotool <device_node> smoothing <status | type | factor>

     Set the value of a smoothing property:
     $ yokotool <device_node> smoothing <status | type | factor> <value>


Release 1.0
~~~~~~~~~~~

1. Bug fix:
   Show the right help message for integration subcommands that would always show "wait" subcommand
   help message.

2. Support "--version" as a standalone option which makes it work in the same model as "-h/--help".

3. Document yokotool's man page, and rework the help for something very minimalistic since examples
   and long descriptions are now in the man page.

4. Reword some help messages to keep the style consistent.

5. Enable support of "?" option for "read", "set" and "set <subcommand>", "get", "integration" and
   "smoothing" commands. Users can get further information about the arguments expected by some
   commands.

6. Add a README file containing generic information as well as our coding style guidelines.

7. Change "read <limit>" positional argument to "read -l/--limit" optional argument.


Release 0.2
~~~~~~~~~~~

1. Bug fixes:
   When setting interval, a misleading error message was outputted to user when they enter a whole
   number (i.e. 5) instead of a rational number (i.e. 5.0).

   Do not display duplicated error messages.

2. Change Voltage notation from U to V since V is the letter most commonly used in physics
   litterature and documentation.

3. Implement socket-based interface: yokotool listens on a TCP port defined by user, processes
   commands directed there, and routes results to that same TCP port.


Release 0.1
~~~~~~~~~~~

Yokotool is a tool for controlling the Yokogawa WT310 industrial power meter. It supports most of
the WT310 functionality except of some very advanced and rarely used like harmonics. Its
command-line interface uses sub-options similar to git. For now yokotool only supports USB
interface, it does not support RS232.

The tool is written in python. It is based on WT310.py library that can be used directly by other
python-based programs, e.g., unit tests. Hence, yokotool is a wrapper over WT310.py library which
mostly implements command-line options, prints help messages, etc.

Yokotool was created to answer the need to have a tool supporting WT310 on Linux.

Further detail about yokotool's capabilities as well as usage examples are embedded within the tool,
and exposed to users by means of -h/--help argument.
